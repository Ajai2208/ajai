import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart' as path_provider;
void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Cleaner',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  var _image;
  var imagePicker;
  @override
  void initState(){
    super.initState();
    imagePicker=new ImagePicker();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(

        title: Text(widget.title),
      ),
      body: Center(

        child: Column(

          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
                child: Text("Choose Image"),
                onPressed: () async {
                  try {
                    final pickedFile =
                    await _picker.getImage(source: ImageSource.gallery);
                    setState(() {
                      localImageFile = File(pickedFile.path);
                      statusText = "Image Chosen";
                    });
                  } catch (e) {
                    setState(() {
                      imageText = "Error selecting image";
                    });
                  }
                }),
            RaisedButton(
                child: Text("Remove EXIF Data and Save"),
                onPressed: () async {
                  final saveDir =
                  await path_provider.getExternalStorageDirectory();

                  var formatSplit = localImageFile.path.split(".");
                  var format = formatSplit[formatSplit.length - 1];

                  final targetPath =
                      saveDir.absolute.path + "/NewCleanFile.$format";

                  await FlutterImageCompress.compressAndGetFile(
                      localImageFile.absolute.path, targetPath);

                  print("TARGETPATH: $targetPath");

                  setState(() {
                    statusText = "Image Saved";
                  });
                }),
          ],
        ),
      ),
      // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
